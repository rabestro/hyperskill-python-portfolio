{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Practical Journey into Modern Python","text":"<p>Welcome! This project is more than just a collection of code. It's a living journal of a journey: the story of an experienced software engineer from the statically-typed world of Java and Scala diving headfirst into the dynamic, rapidly-evolving ecosystem of modern Python.</p> <p>Author's Note</p> <p>My name is Jegors. As a developer with a background in the JVM ecosystem, I needed to get up to speed with Python for a new challenge. I believe the best way to learn is by building, so I turned to the excellent projects on the Hyperskill platform to guide my learning.</p> <p>But learning a language is only half the story. The real challenge was navigating the modern Python development landscape. So much information online is outdated. This project became my way of answering the question: \"How would you build a Python project with best practices in 2025?\"</p>"},{"location":"#the-goal-beyond-syntax","title":"The Goal: Beyond Syntax","text":"<p>This portfolio has two primary goals:</p> <ol> <li> <p>A Personal Learning Ledger: To document the process of not just learning Python's syntax, but mastering its contemporary toolchain. This includes everything from dependency management with <code>uv</code> to code quality with <code>ruff</code> and static analysis with <code>mypy</code>.</p> </li> <li> <p>A Modern Guide for Learners: To serve as a practical, up-to-date resource for anyone starting their Python journey today. Instead of abstract examples, this site breaks down real, working projects and explains the \"why\" behind the technical decisions, refactoring processes, and tool choices.</p> </li> </ol>"},{"location":"#what-you-will-find-here","title":"What You Will Find Here","text":"<p>This site is structured to help you explore different facets of the development process:</p> <ul> <li> <p>Projects: Dive into detailed case studies of each application. Each page explores the project's goals, the refactoring journey from a simple script to a robust application, and the key Python concepts illustrated.</p> </li> <li> <p>Development Setup: Explore the \"how\" of the project. This section explains the modern tooling used, why each tool was chosen, and how they fit together to create a professional development environment.</p> </li> <li> <p>Blog: Read articles and thoughts on broader software development topics, lessons learned, and comparisons between the Python and JVM ecosystems.</p> </li> </ul> <p>Thank you for visiting. I hope you find this journey as insightful as I have.</p>"},{"location":"projects/coffee_machine/","title":"Project: Coffee Machine","text":"","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#overview","title":"Overview","text":"<p>The Coffee Machine is an interactive, stateful command-line application that simulates the experience of using a real coffee machine. It manages resources like water, milk, and coffee beans, handles purchases, and allows for restocking.</p> <p>This project serves as an excellent case study in refactoring a simple procedural script into a robust, object-oriented application using a state machine pattern.</p> <p>Official Project on Hyperskill</p> <p>This project is based on the Coffee Machine project from the Hyperskill platform. It's a fantastic exercise for practicing functions, loops, and conditional logic in Python.</p> <p>About the project from Hyperskill: What can be better than a cup of coffee during a break? A coffee that you don\u2019t have to make yourself. It\u2019s enough to press a couple of buttons on the machine and you get a cup of energy; but first, we should teach the machine how to do it. In this project, you will work on programming a coffee machine simulator. The machine works with typical products: coffee, milk, sugar, and plastic cups; if it runs out of something, it shows a notification. You can get three types of coffee: espresso, cappuccino, and latte. Since nothing\u2019s for free, it also collects the money.</p>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#usage","title":"Usage","text":"<p>To run the coffee machine simulator, use the following command in your terminal after installation:</p> <pre><code>coffeemachine\n</code></pre> <p>The application will then guide you through the available actions, such as buying coffee, filling supplies, or taking the money from the machine.</p>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#the-refactoring-journey","title":"The Refactoring Journey","text":"<p>The most valuable aspect of this project was the process of refactoring it from a simple script into a well-designed application.</p> <p>The Starting Point: A Procedural Script</p> <p>Initially, the program was a set of functions operating on a single, global dictionary that held the machine's resources. This approach, while functional for a simple task, had several significant drawbacks:</p> <ul> <li>Hard to Test: Functions with <code>input()</code> calls scattered throughout the logic are very difficult to test automatically.</li> <li>Poor Encapsulation: Any function could directly modify the global state, creating a high risk of bugs and making the code hard to reason about.</li> <li>Unclear Logic: The program flow was controlled by a series of <code>if/else</code> statements, which could easily become a tangled mess as new features were added.</li> </ul>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#the-solution-a-state-machine","title":"The Solution: A State Machine","text":"<p>To address these issues, we refactored the code around a central <code>CoffeeMachine</code> class designed as a State Machine.</p> <p>What is a State Machine?</p> <p>A state machine is a design pattern where an object's behavior changes depending on its internal state. Our <code>CoffeeMachine</code> can be in several states, such as <code>MAIN_MENU</code>, <code>CHOOSING_COFFEE</code>, or <code>FILLING_WATER</code>. The current state dictates how user input is processed and what the next state will be. This completely eliminated the complex <code>if/else</code> chains.</p>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#better-data-with-dataclasses-and-enums","title":"Better Data with Dataclasses and Enums","text":"<p>A key part of the refactoring was improving how we modeled our data. This is where Python's modern features shine.</p>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#states-as-enums","title":"States as Enums","text":"<p>Instead of using simple strings like <code>\"main_menu\"</code> for states (which can lead to typos), we used Python's built-in <code>Enum</code> type. This makes the code safer and more self-documenting.</p> <pre><code># From: src/hyperskill_python_portfolio/coffee_machine/models.py\nfrom enum import Enum, auto\n\nclass State(Enum):\n    \"\"\"Represents the operational states of the CoffeeMachine.\"\"\"\n    MAIN_MENU = auto()\n    CHOOSING_COFFEE = auto()\n    FILLING_WATER = auto()\n    # ... and so on\n</code></pre>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#recipes-as-dataclasses","title":"Recipes as Dataclasses","text":"<p>Similarly, all the data for a coffee recipe (water, milk, beans, price) was consolidated from multiple dictionaries into a single, clean <code>dataclass</code>. This creates an immutable, single source of truth for each coffee type.</p> <pre><code># From: src/hyperskill_python_portfolio/coffee_machine/models.py\nfrom dataclasses import dataclass\n\n@dataclass(frozen=True)\nclass CoffeeRecipe:\n    \"\"\"A data blueprint for a coffee type. Immutable by design.\"\"\"\n    name: str\n    water_ml: int\n    milk_ml: int\n    beans_g: int\n    price_usd: int\n</code></pre> <p>This approach makes the code safer, easier to read, and much simpler to maintain or extend.</p>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/coffee_machine/#key-python-concepts-illustrated","title":"Key Python Concepts Illustrated","text":"<ul> <li> <p>Object-Oriented Programming (OOP): Encapsulating logic and data in the <code>CoffeeMachine</code> class.</p> </li> <li> <p>Design Patterns: Implementing a clean State Machine.</p> </li> <li> <p><code>enum.Enum</code>: Creating safe and explicit enumerations for states.</p> </li> <li> <p><code>dataclasses</code>: Building robust and immutable data models.</p> </li> <li> <p><code>@property</code>: Creating clean, read-only attributes like <code>is_running</code> and <code>prompt</code>.</p> </li> <li> <p>Type Hinting: Ensuring code correctness and clarity for static analysis with <code>mypy</code>.</p> </li> <li> <p>Testable Code: Designing a class that can be tested in isolation by removing direct <code>input()</code> dependencies.</p> </li> </ul>","tags":["Object-Oriented Programming","State Machine","Enums","Dataclasses","Refactoring"]},{"location":"projects/honest_calculator/","title":"Project: Honest Calculator","text":"","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#overview","title":"Overview","text":"<p>The Honest Calculator is an interactive command-line application that performs basic arithmetic operations. What makes it \"honest\" is its quirky, opinionated personality. It provides funny feedback on certain inputs (like multiplying by 1 or using single-digit numbers) and includes a multi-step confirmation flow before storing \"unimpressive\" results.</p> <p>This project is a perfect exercise in refactoring a simple script with \"magic numbers\" and global state into a clean, object-oriented, and testable application.</p> <p>Official Project on Hyperskill</p> <p>This project is my implementation of the Honest Calculator project from the Hyperskill platform.</p> <p>The premise is fun: I had to build a calculator for a fictional \"International Union Against Idleness\" competition. The goal wasn't just to calculate, but to motivate users. The calculator helps with complex math, but for simple operations\u2014like adding small numbers or multiplying by one\u2014it gets a bit \"honest\" and encourages the user to do it themselves. This quirky requirement makes it a great challenge for handling state and conditional logic.</p> <p>For me, this project was the perfect opportunity to move beyond a simple script. The need to manage memory, a series of \"laziness\" checks, and a multi-step confirmation flow pushed me to refactor the initial procedural code into a much cleaner, class-based design. It became a fantastic case study in making code not just work, but be testable and readable.</p>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#usage","title":"Usage","text":"<p>To run the calculator, use the following command in your terminal after installation:</p> <pre><code>honestcalc\n</code></pre> <p>The application will prompt you to enter equations like <code>2 + 2</code> or <code>5</code> * <code>M</code> (to use the value from memory).</p>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#the-refactoring-journey","title":"The Refactoring Journey","text":"<p>This project provides a classic example of how moving from a procedural script to an object-oriented design dramatically improves code quality.</p> <p>The Starting Point: A 'Quick and Dirty' Script</p> <p>The first working version was a single script with several issues common in early drafts:</p> <ul> <li>Global State: The <code>memory</code> was a global variable, making it hard to track where it was being modified.</li> <li>Magic Numbers: All user-facing messages were stored in a large tuple, and accessed with numeric indices like <code>MESSAGE[4]</code> or <code>MESSAGE[10]</code>. This was unreadable and extremely brittle; adding a new message would require re-numbering all subsequent indices.</li> <li>Difficult to Test: With <code>input()</code> and <code>print()</code> calls mixed directly into the main logic loop, writing automated unit tests was nearly impossible.</li> </ul>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#the-solution-an-oop-structure-with-enums","title":"The Solution: An OOP Structure with Enums","text":"<p>The refactoring focused on solving these core problems by introducing a class and leveraging modern Python features.</p>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#1-encapsulation-with-a-class","title":"1. Encapsulation with a Class","text":"<p>All logic and state were moved into a central <code>HonestCalculator</code> class. This immediately solved the global state problem by making <code>memory</code> an instance attribute (<code>self.memory</code>).</p>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#2-replacing-magic-numbers-with-enums","title":"2. Replacing Magic Numbers with Enums","text":"<p>This was the most impactful change for readability. The tuple of messages was replaced with a dedicated <code>Enum</code>, transforming unreadable code into self-documenting code.</p> <p>Before:</p> <pre><code># Unclear and brittle\nprint(MESSAGE[3])\n</code></pre> <p>After:</p> <pre><code># From: src/hyperskill_python_portfolio/honest_calculator/main.py\nclass Msg(Enum):\n    # ...\n    DIV_BY_ZERO = \"Yeah... division by zero. Smart move...\"\n\n# Clear, safe, and self-documenting\nprint(Msg.DIV_BY_ZERO.value)\n</code></pre>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#3-data-driven-logic","title":"3. Data-Driven Logic","text":"<p>Instead of a complex chain of <code>if</code> statements for the laziness checks, we adopted a data-driven approach. A list of <code>(condition, message)</code> tuples defines the rules, making the logic cleaner and easier to extend.</p> <pre><code># From: src/hyperskill_python_portfolio/honest_calculator/main.py\nlaziness_rules = [\n    (lambda: self._is_one_digit(x) and self._is_one_digit(y), Msg.IS_LAZY),\n    (lambda: (x == 1 or y == 1) and oper == \"*\", Msg.IS_VERY_LAZY),\n    # ... more rules\n]\n</code></pre> <p>This journey turned a fragile script into a robust, readable, and maintainable application, ready for testing and extension.</p>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"projects/honest_calculator/#key-python-concepts-illustrated","title":"Key Python Concepts Illustrated","text":"<ul> <li> <p>Object-Oriented Programming (OOP): Encapsulating state and behavior in the <code>HonestCalculator</code> class.</p> </li> <li> <p><code>enum.Enum</code>: Eliminating \"magic numbers\" by creating a safe, named collection of constants for all user-facing messages.</p> </li> <li> <p>Modern Control Flow (<code>match...case</code>): Using structural pattern matching for elegantly handling different arithmetic operators.</p> </li> <li> <p>Data-Driven Design: Defining logic (like the laziness checks) as data, making it more modular and extensible.</p> </li> <li> <p>Unit Testing with <code>pytest</code>: Writing comprehensive tests by using fixtures like <code>monkeypatch</code> (to mock <code>input()</code>) and <code>capsys</code> (to capture <code>print</code> output).</p> </li> <li> <p>Type Hinting: Using type annotations for all functions and variables to enable static analysis with <code>mypy</code>.</p> </li> </ul>","tags":["Python","Refactoring","Testing","OOP"]},{"location":"reference/billsplitter/","title":"Billsplitter","text":"<p>::: hyperskill_python_portfolio.billsplitter.main</p>"},{"location":"reference/cconverter/","title":"Cconverter","text":"<p>::: hyperskill_python_portfolio.currency_converter.main</p>"},{"location":"reference/chatbot/","title":"Chatbot","text":"<p>::: hyperskill_python_portfolio.chatbot.main</p>"},{"location":"reference/coffeemachine/","title":"Coffeemachine","text":"<p>::: hyperskill_python_portfolio.coffee_machine.main</p>"},{"location":"reference/hangman/","title":"Hangman","text":"<p>::: hyperskill_python_portfolio.hangman.main</p>"},{"location":"reference/honestcalc/","title":"Honestcalc","text":"<p>::: hyperskill_python_portfolio.honest_calculator.main</p>"},{"location":"reference/loancalc/","title":"Loancalc","text":"<p>::: hyperskill_python_portfolio.loancalc.main</p>"},{"location":"reference/rps/","title":"Rps","text":"<p>::: hyperskill_python_portfolio.rps.main</p>"},{"location":"reference/zookeeper/","title":"Zookeeper","text":"<p>::: hyperskill_python_portfolio.zookeeper.main</p>"}]}