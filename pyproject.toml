[project]
name = "hyperskill-python-portfolio"
version = "0.3.0"
description = "My journey through Hyperskill, captured in a portfolio of Python projects. Each solution is refactored for quality, tested with pytest, and statically checked with mypy."
authors = [
    { name = "Jegors ÄŒemisovs", email = "jegors.cemisovs@gmail.com" },
]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Education",
]
dependencies = [
    "setuptools-scm>=8.0",
]

[project.urls]
Homepage = "https://github.com/rabestro/hyperskill-python-portfolio"
Repository = "https://github.com/rabestro/hyperskill-python-portfolio.git"
Issues = "https://github.com/rabestro/hyperskill-python-portfolio/issues"

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "radon",
    "pytest>=8.4.1",
]
docs = [
    "mkdocs",
    "mkdocs-material",
]

[project.scripts]
loancalc = "loancalc.main:main"
hangman = "hangman.main:main"
rps = "rps.main:main"
billsplitter = "billsplitter.main:main"
chatbot = "chatbot.main:main"
zookeeper = "zookeeper.main:main"

# ==============================================================================
# Tooling Configuration
# ==============================================================================

[tool.uv]
package = true
index-strategy = "unsafe-best-match"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"


[tool.ruff]
target-version = "py313"
line-length = 88


[tool.ruff.lint]
select = [
    "E",   # pycodestyle: Enforces style rules (e.g., indentation, line length).
    "F",   # Pyflakes: Detects logical errors (e.g., unused imports, undefined names).
    "I",   # isort: Ensures imports are neatly sorted and organized.
    "UP",  # pyupgrade: Automatically rewrites code to use modern Python syntax.
    "B",   # flake8-bugbear: Finds likely bugs and design problems.
    "C4",  # flake8-comprehensions: Pushes for more idiomatic list/dict/set comprehensions.
    "D",   # pydocstyle: Enforces standards for docstring formatting.
    "TID", # flake8-tidy-imports: Restricts relative imports to enforce a clean architecture.
    "RUF", # Ruff-specific rules: Catches ambiguities and improves code clarity.
]
ignore = []


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
docstring-code-format = true


[tool.mypy]
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-ra -q --strict-markers"


[tool.radon]
exclude = ["tests", "docs"]
cc_min = "B"
mi_min = 70

# ==============================================================================
# Build System Configuration
# ==============================================================================

[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# This will create a src/your_project/_version.py file.
# This is optional but good practice.
write_to = "src/hyperskill_python_portfolio/_version.py"
